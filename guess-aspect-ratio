#!/usr/bin/env php
<?php

if ($argc < 2) {
    fprintf(STDERR, "Please specify one or more files to review\n");
    exit(1);
}

$commonRatios = [
    // classics

    [ 'height' => '4',  'width' => '3'  ],
    [ 'height' => '16', 'width' => '9'  ],
    [ 'height' => '16', 'width' => '10' ],

    // others

    [ 'height' => '1',  'width' => '1'  ],
    [ 'height' => '3',  'width' => '2'  ],
    [ 'height' => '5',  'width' => '4'  ],
    [ 'height' => '11', 'width' => '8'  ],
    [ 'height' => '14', 'width' => '9'  ],
    [ 'height' => '16', 'width' => '5'  ],
    [ 'height' => '19', 'width' => '16' ],
    [ 'height' => '21', 'width' => '9'  ],
    [ 'height' => '39', 'width' => '18' ],
];

array_shift($argv);

foreach ($argv as $file) {
    $fileSize = getimagesize($file);
    if ($fileSize === false) {
        fprintf(STDERR, "%s: could not read file size\n", $file);
        printf("%s: unknown\n", $file);
        continue;
    }

    $fileHeight = $fileSize[0];
    $fileWidth  = $fileSize[1];

    foreach ($commonRatios as $reviewRatio) {
        $compareHeight = $fileHeight / $reviewRatio['height'];
        $compareWidth  = $fileWidth  / $reviewRatio['width'];
        $compare = $compareHeight / $compareWidth;

        if ($compare > 0.99 && $compare < 1.01) {
            printf("%s: %dx%d\n", $file, $reviewRatio['height'], $reviewRatio['width']);
            continue 2;
        }

        $inverseRatio = [
            'width'  => $reviewRatio['height'],
            'height' => $reviewRatio['width'],
        ];

        $compareHeight = $fileHeight / $inverseRatio['height'];
        $compareWidth  = $fileWidth  / $inverseRatio['width'];
        $compare = $compareHeight / $compareWidth;

        if ($compare > 0.99 && $compare < 1.01) {
            printf("%s: %dx%d\n", $file, $inverseRatio['height'], $inverseRatio['width']);
            continue 2;
        }
    }

    printf("%s: unknown\n", $file);
}

// vim:ai:cin:et:ts=4:sw=4:fo+=or
