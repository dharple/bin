#!/bin/bash -e
#
# Keeps writing out random files until you tell it to stop.  Pass `-r` to cause
# the script to look for subdirectories and write out files there, too.
#
# Run `remove-random-files` if you need to clean up after you're done.
#

RECURSIVE=0
if [ -n "$1" -a "$1" = "-r" ] ; then
	RECURSIVE=1
fi

MAXSLEEP=30 # seconds
MAXBLOCKS=1024 # tunes dd
BLOCKSIZE=256 # tunes dd

uuid1() {
	test -x /usr/bin/uuid && /usr/bin/uuid -v 1 -m && exit
	test -x /usr/bin/uuidgen && /usr/bin/uuidgen -t && exit
	echo "uuid1-failed"
}

uuid4() {
	test -x /usr/bin/uuid && /usr/bin/uuid -v 4 && exit
	test -x /usr/bin/uuidgen && /usr/bin/uuidgen -r && exit
	echo "uuid4-failed"
}

while [ 1 ] ; do
	case $(($RANDOM % 6)) in
		0) ID=$(uuid1) ;;
		1) ID=$(uuid4) ;;
		2) ID=$(date "+%N") ;;
		3) ID=$(date | md5sum | cut -f 1 -d ' ') ;;
		4) ID=$(date | sha1sum | cut -f 1 -d ' ') ;;
		5) ID=$(date | sha256sum | cut -f 1 -d ' ') ;;
		*) ID="broken" ;;
	esac

	FILE=random-$ID.txt

	if [ "$RECURSIVE" = "1" ] ; then
		DIR=$(find -type d | shuf | head -1)
	else
		DIR=.
	fi

	date
	echo writing "$DIR/$FILE"
	dd if=/dev/urandom of="$DIR/$FILE" bs=$BLOCKSIZE count=$(($RANDOM % $MAXBLOCKS))
	sleep $(($RANDOM % $MAXSLEEP))
done

